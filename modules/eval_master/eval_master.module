<?php

// include analysis function
include_once('eval_master.analysis.inc');

/**
 * Implementation of hook_menu
 */
function eval_master_menu () { 
  $menu_items = array();

  $menu_items['formation/eval_master'] = array(
    'title' => "Eval Master", 
    'description' => 'Course evaluation module, with forms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eval_master_evaluation_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $menu_items['formation/eval_master_analysis'] = array(
    'title' => "Analysis",
    'description' => 'Results',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eval_master_analysis_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );


  return $menu_items;
}

/**
 * Page callback
 */
function eval_master_evaluation_form($form_state) {

  if (_eval_master_evaluation_already_completed()) {
    //drupal_set_message(t('Vous avez déjà complété l\'évaluation de la formation PHP et Drupal 6.'));
    $questions = _eval_master_get_questions();
    $answers = _eval_master_get_answers(_eval_master_get_evaluation_unique_id());
    $form = _eval_master_get_evaluation_form($questions, $answers);
    return null;
  }
  else {
    $questions = _eval_master_get_questions();
    $form = _eval_master_get_evaluation_form($questions);

    return $form;
  }
}

/**
 * Check if the evaluation has already been submitted by a user
 */
function _eval_master_evaluation_already_completed() {
  $evaluation_unique_id = _eval_master_get_evaluation_unique_id();
  return _eval_master_evaluation_exists($evaluation_unique_id);
}

/**
 * Get the users unique_id
 * TODO: We need to use something else than two informations available in the DB for real anonymous evaluation.
 */
function _eval_master_get_evaluation_unique_id() {
  global $user;
  return md5($user->uid . $user->mail);
}

/**
 * Check if an evaluation exists for a given uid
 *
 * @param $unique_id
 *   A unique user id
 */
function _eval_master_evaluation_exists($unique_id) {
  $limit = 1;
  $query_evaluation = 'SELECT uid FROM {eval_master_evaluation} WHERE uid = \'' . $unique_id . '\' LIMIT ' . $limit;

  if (db_result(db_query($query_evaluation)) === false) {
    return false;
  }
  else {
    return true;
  }
}

/**
 * Get questions from the database
 */
function _eval_master_get_questions() {
  $current_page = 0;
  $page_length = 100;

  $query_questions = 'SELECT * FROM {eval_master_question} LIMIT ' . $current_page . ', ' . $page_length;

  return db_query($query_questions);
}

/**
 * Get answers from the database
 */
function _eval_master_get_answers($unique_id) {
  $query_answers = 'select * from {eval_master_answer} as eval_master_answer where eval_master_answer.eval_id = (select eval_id from {eval_master_evaluation} as eval_master_evaluation where uid = "' . $unique_id . '")';

  $answers = array();
  $rows = db_query($query_answers);
  while ($row = db_fetch_array($rows)) {
    $answers[$row['question_id']] = $row;
  }

  return $answers;
}
/**
 * Generate the appropriate $form elements based on a mysql result
 *
 * @param $questions
 *   A raw mysql result resource containing information about the questions
 */
function _eval_master_get_evaluation_form($questions, $answers = array()) {
  $form = array();

  while ($next_question = db_fetch_array($questions)) {
    if (!isset($form[$next_question['category']])) {
      $form[$next_question['category']] = array(
        '#type' => 'fieldset',
        '#title' => t($next_question['category']),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => FALSE,
        '#default_value' => $answers[$next_question['question_id']]['value'],
      );
    }

    switch($next_question['type']) {
      case 'long_answer':
        $form[$next_question['category']]['question_' . $next_question['question_id']] = _eval_master_create_long_answer_element($next_question['question_id'], t($next_question['label']));
        break;
      case 'multiple_choice':
        $form[$next_question['category']]['question_' . $next_question['question_id']] = _eval_master_create_multiple_choice_element(t($next_question['label']));
        break;
      default:
        drupal_set_message('Unknown question resource in _eval_master_get_evaluation_form.');
        break;
    }
  }
  
  $form['submit'] = array(	
    '#type' => 'submit',
    '#value' => t('Enregistrer vos réponses'),
  );

  return $form;
}

/**
 * Helper function to create long-form questions
 *
 * @param $question_id
 *   Does nothing
 * @param $label
 *   The question string
 */
function _eval_master_create_long_answer_element($question_id, $label) {
  $long_answer_element = array(
    '#type' => 'textarea',
    '#title' => $label,
    '#size' => 60,
    '#maxlength' => 64,
  );
  return $long_answer_element;
}

/**
 * Helper function to create multiple-choice questions
 *
 * @param $label
 *   The question string
 */
function _eval_master_create_multiple_choice_element($label) {
  $multiple_choice_element = array(
    '#type' => 'radios',
    '#title' => $label,
    '#options' => _eval_master_get_choices(),
    '#required' => FALSE,
  );
  return $multiple_choice_element;
}

/**
 * Return the choices for multiple choice questions
 */
function _eval_master_get_choices() {
  $choices = array(0 => t("Aucune de ces réponses"),1 => t("pas d'accord du tout"), 2 => t("pas completement d'accord"), 3 => t("d'accord"), 4 => t("tout a fait d'accord"));
  
  return $choices;
}

/**
 * Validate function for the evaluations
 * TODO actually use this for something
 */
function eval_master_evaluation_form_validate($form, &$form_state) {
  if (is_numeric($form_state['values']['QuestionTest'])) {
    form_set_error('QuestionTest', t('ERREUR'));
  }
}

/**
 * Submit function for the evaluations
 */
function eval_master_evaluation_form_submit ($form, &$form_state) {
  $question_ids = _eval_master_filter_received_question_ids($form_state['values']);
  $evaluation = array('cours' => 'PHP et Drupal 6',  'uid' => _eval_master_get_evaluation_unique_id());
  drupal_write_record('eval_master_evaluation', $evaluation);
  foreach($question_ids as $question) {
    $answer = array('eval_id' => $evaluation['eval_id'], 'question_id' => $question, 'value' => $form_state['values']['question_' . $question]);
    drupal_write_record('eval_master_answer', $answer);
  }
  drupal_set_message(t('BRAVO'));
}

/**
 * Pull only the question answers out of submitted form values
 */
function _eval_master_filter_received_question_ids($received_values) {
  $question_ids = array_filter(array_keys($received_values), '_eval_master_is_question_element');

  // Remove prefixes from ids
  for($question_iterator = 0; $question_iterator < count($question_ids); $question_iterator++) {
    $current_question_id = $question_ids[$question_iterator];
    $question_ids[$question_iterator] = substr($current_question_id, strpos($current_question_id, '_') + 1);
  }

  return $question_ids;
}

/**
 * Check if a given value identifies a question in the evaluation form
 */
function _eval_master_is_question_element($element) {
  // Check of the element id starts with "question_"
  return (strpos($element, 'question_') === 0);
}
